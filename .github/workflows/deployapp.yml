name: 'Deploy App'

on:
  push:
    branches:
    - azure
  pull_request:

jobs:
  terraform:
    name: 'Brewredis Infrastructure'
    runs-on: ubuntu-latest
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CL_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CL_PWD }}
      ARM_SUBSCRIPTION_ID: 874f6233-e9b0-4c57-a3bc-2365b7544f2a
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_MS }}
      TF_VAR_redisRegions: '["westeurope"]'
      TF_VAR_rgName: 'brewredis-prod'
      TF_VAR_appName: 'storefront'
      TF_VAR_svcName: 'brewredis-prod'
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_CLOUD }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init ./infra

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan ./infra
    
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/azure' && github.event_name == 'push'
      run: terraform apply -auto-approve ./infra

  configure_app:
    name: 'Brewredis App'
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: brewredis-prod # customize this
      SPRING_CLOUD_SERVICE: brewredis-prod # customize this
      SPRING_CLOUD_APP: storefront # customize this
      BREWDIS_JAR: brewdis-api/build/libs/brewdis-api-1.0.0-SNAPSHOT.jar
      SPRING_REDIS_PORT: 10000
      STOMP_PORT: 80

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Login with Key Vault SP
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_KEY_VAULT }}
    
    - name: Get Resource Group SP from Key Vault
      uses: Azure/get-keyvault-secrets@v1.0
      with:
        keyvault: "brewrediskv"
        secrets: "AZURE-CREDENTIALS-BREWREDIS-PROD, SPRING-REDIS-HOST, SPRING-REDIS-PASSWORD"
      id: keyvaultaction

    - name: Login with Service SP
      uses: azure/login@v1
      with:
        creds: ${{ steps.keyvaultaction.outputs.AZURE-CREDENTIALS-BREWREDIS-PROD }}
    
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    
    - name: Gradle build
      run: |
        ./gradlew build
        
    - name: Install ASC AZ extension
      run: az extension add --name spring-cloud
   
    - name: Deploy with AZ CLI commands
      run: |
          az spring-cloud app deploy \
            -s $SPRING_CLOUD_SERVICE \
            -g $RESOURCE_GROUP \
            --name $SPRING_CLOUD_APP \
            --jvm-options='-Xms2048m -Xmx2048m'\
            --jar-path ${{ github.workspace }}/$BREWDIS_JAR \
            --env SPRING_REDIS_HOST=${{ steps.keyvaultaction.outputs.SPRING-REDIS-HOST }} \
              SPRING_REDIS_PASSWORD=${{ steps.keyvaultaction.outputs.SPRING-REDIS-PASSWORD }} \
              SPRING_REDIS_PORT=$SPRING_REDIS_PORT \
              STOMP_HOST=${SPRING_CLOUD_SERVICE}-${SPRING_CLOUD_APP}.azuremicroservices.io \
              STOMP_PORT=$STOMP_PORT
